void ScreenSM_VS_main(
	float4 Pos: POSITION,
	
	out float4 oPos: POSITION,
	out float2 oTexCoord: TEXCOORD0,
	
	out float3 oRay : TEXCOORD1,
	
	uniform float3 farCorner,
	uniform float flip
	)
{
	// Clean up inaccuracies
	Pos.xy = sign(Pos.xy);
	
	oPos = float4(Pos.xy, 0, 1);
	oPos.y *= flip;
	
	// Image-space
	oTexCoord.x = 0.5 * (1 + Pos.x);
	oTexCoord.y = 0.5 * (1 - Pos.y);

	// This ray will be interpolated and will be the ray from the camera
	// to the far clip plane, per pixel
	oRay = farCorner * float3(Pos.xy, 1);
}

//GL and DX expect a different value
arbfp1 float finalDepth(float4 p)
{
    // GL needs it in [0..1]
    return (p.z / p.w) * 0.5 + 0.5;
}

float finalDepth(float4 p)
{
    // normally it's in [-1..1]
    return p.z / p.w;
}

void ScreenSM_PS_main(
	float2 texCoord: TEXCOORD0, 
	float3 ray : TEXCOORD1,
	out float4 oColour : COLOR,
	out float oDepth : DEPTH,
	
	uniform sampler Tex0: register(s0),
	uniform sampler Tex1: register(s1),
	uniform float4x4 proj,
	uniform float3 farCorner,
	uniform float farClipDistance,
  uniform float4*4 matViewToShadowProj
	)
{
	float4 a0 = tex2D(Tex0, texCoord); // ShadowDepthMap
	float4 a1 = tex2D(Tex1, texCoord); // MainCameraDrpthMap

	// Clip fragment if depth is too close, so the skybox can be rendered on the background
	clip(a0.w-0.0001);

	// Calculate depth of fragment;
	float3 viewPos = normalize(ray) * farClipDistance * a1.w;
	float4 projPos = mul( proj, float4(viewPos, 1) );
	oDepth =1;// finalDepth(projPos);
  float ScenePixel=mul(matViewToShadowProj,a1);
  if(ScenePixel.r<oDepth)
    oColour=float4(1,0,0,1);
  else
     oColour=float4(1,1,0,1);
}