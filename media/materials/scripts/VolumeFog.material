////////////////////////////////////////////////////////////////////////////////
vertex_program VolumeFog/CWDepth/VS hlsl
{
	source cwVolumeDepth.hlsl
	target vs_3_0
	entry_point vsVolumeCWDepth
	
	default_params
	{
		param_named_auto wvpMat worldviewproj_matrix
	}
}

fragment_program VolumeFog/CWDepth/PS hlsl
{
	source cwVolumeDepth.hlsl
	target ps_3_0
	entry_point psVolumeCWDepth
	default_params
	{
		param_named_auto worldviewMat worldview_matrix
	}
}
			
// render  near faces to calculate fog 
vertex_program VolumeFog/vsNearFogColor hlsl
{
	source vsNearFogColor.hlsl
	target vs_3_0
	entry_point main
	default_params
	{
		param_named_auto worldViewProj worldviewproj_matrix
		param_named_auto timePast			 time
	}
}

fragment_program VolumeFog/psNearFogColor hlsl
{
	source psNearFogColor.hlsl
	target ps_3_0
	entry_point main
	default_params
	{
		param_named_auto camFarClipDistance  far_clip_distance
		param_named_auto wvpMat              worldviewproj_matrix
		param_named_auto viewportSize        viewport_size
		param_named_auto fogColor            custom 0
		//fogParam.x 为浓度，y为扰动纹理移动速度，zw为扰动纹理移动方向
		param_named_auto fogParam						 custom 1    
		param_named_auto UVScale						 custom 2
		//param_named_auto fogSecColor custom 1
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// render  far faces to calculate fog 
vertex_program VolumeFog/vsFarFogColor hlsl
{
	source vsFarFogColor.hlsl
	target vs_3_0
	entry_point main
	default_params
	{
		param_named_auto worldViewProj worldviewproj_matrix
	}
}

fragment_program VolumeFog/psFarFogColor hlsl
{
	source psFarFogColor.hlsl
	target ps_3_0
	entry_point main
	default_params
	{
		param_named_auto camFarClipDistance far_clip_distance
		param_named 		 FogColor						float4 	1.0 1.0 1.0 1.0
		//FogDensity.x为雾的浓度，FogDensity.y为内部体积雾的浓度调整系数
		param_named      FogDensity				  float4  1.0 1.0 0.0 0.0
	}
}

////////////////////////////////////////////////////////////////////////////////
// render  frustum's near clip face to calculate fog 
vertex_program VolumeFogShading/material/hlsl/vsNearClipFace hlsl
{
	source VolumeFogShading/material/hlsl/vsNearClipFace.hlsl
	target vs_3_0
	entry_point main

	
}
fragment_program VolumeFogShading/material/hlsl/psNearClipFace hlsl
{
	source VolumeFogShading/material/hlsl/psNearClipFace.hlsl
	target ps_3_0
	entry_point main

}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////

// combine  near fog color
vertex_program VolumeFogShading/material/hlsl/vsNearCombine hlsl
{
	source NearCombine.hlsl
	target vs_3_0
	entry_point vsNearCombine
	
		default_params
	{
		param_named_auto viewportSize        viewport_size
	}

}

fragment_program VolumeFogShading/material/hlsl/psNearCombine hlsl
{
	source NearCombine.hlsl
	target ps_3_0
	entry_point psNearCombine
	
}

///////////////////////////////////////////////////////////////////////////////////
//combine far fog color
vertex_program VolumeFogShading/material/hlsl/vsFarCombine hlsl
{
	source FarCombine.hlsl
	target vs_3_0
	entry_point vsFarCombine
	
}

fragment_program VolumeFogShading/material/hlsl/psFarCombine hlsl
{
	source FarCombine.hlsl
	target ps_3_0
	entry_point psFarCombine

}

////////////////////////////////////////////////////////////////////////////////////
// Textured Phong shading material
material VolumeFog
{	
  //////////////////////////////////////////////////////////////////////////////////////////////	
	technique renderNearFog
	{
	  scheme renderNearFog
		pass main
		{
		  //scene_blend alpha_blend
		  depth_check off
		  depth_write off
		  
			vertex_program_ref VolumeFog/vsNearFogColor
			{
			}
			fragment_program_ref VolumeFog/psNearFogColor
			{
			}
			texture_unit SceneDepth
			{
				//tex_coord_set 0
				tex_address_mode clamp
				filtering none
				content_type compositor Main main_buffer 0
			}
			
			texture_unit VolumeCWDepth
			{
				tex_address_mode clamp
				filtering none
				content_type compositor Main VolumeCCWDepth 0					
			}
			
			texture_unit Noise
			{
				texture Black.tga
			}
		}
	}
	
	technique VolumeCCWDepth
	{
	  scheme VolumeCCWDepth
		pass
		{
		  cull_hardware anticlockwise
		  cull_software front
		  depth_check off
		  depth_write off
		  vertex_program_ref VolumeFog/CWDepth/VS
			{
			}
			fragment_program_ref VolumeFog/CWDepth/PS
			{	
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////

	technique writeStencil
	{
	  scheme VolumeFogStencil
		pass main
		{
		  depth_func always_pass
			cull_hardware none
		  cull_software none
		  colour_write off
	
		  //texture_unit
			//{

			//}
		}
	}
		//////////////////////////////////////////////////////////////////////////////////////////////
	technique writeStencilWhenBlur
	{
	  scheme VolumeFogStencilBlur
		pass main
		{

      depth_func always_pass
		  colour_write off
		  depth_write off
		  texture_unit
			{

			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	technique justRender
	{
	  scheme WireFrame
		pass main
		{
		  polygon_mode wireframe
			
		
		  texture_unit
			{

			}
		}
	}
	
}



material MS/VolumeFog/Material/Combine
{
	technique hlsl
	{
		pass main
		{
		  
			vertex_program_ref VolumeFogShading/material/hlsl/vsNearCombine
			{
			}
			fragment_program_ref VolumeFogShading/material/hlsl/psNearCombine
			{
			}
			
			texture_unit
			{
				tex_coord_set 0
				filtering none
			}
			texture_unit
			{
				tex_coord_set 1
				filtering none
			}
		}
	}	
}

material VolumeFog/RenderFarFog
{
	technique renderFarFog
	{
	  scheme renderFarFog
		pass main
		{
		  //scene_blend alpha_blend
		  depth_check off
		  depth_write off
			vertex_program_ref VolumeFog/vsFarFogColor
			{
			}
			fragment_program_ref VolumeFog/psFarFogColor
			{
			}
			
			texture_unit SceneDepth
			{
				//tex_coord_set 0
				tex_address_mode clamp
				filtering none				
			}
			
			texture_unit VolumeCWDepth
			{
				tex_address_mode clamp
				filtering none						
			}
		}
	}
}

material InteriorVolumeFog
{	
  technique main
	{
		pass main
		{
		  colour_write off
		  depth_write off

		
			texture_unit
			{

			}
		}
	}
	technique VolumeCCWDepth
	{
	  scheme VolumeCCWDepth
		pass ccwDepth
		{
		  cull_hardware anticlockwise
		  cull_software front
		  depth_check off
		  depth_write off
		  vertex_program_ref VolumeFog/CWDepth/VS
			{
			}
			fragment_program_ref VolumeFog/CWDepth/PS
			{	
			}
		}
	}
}