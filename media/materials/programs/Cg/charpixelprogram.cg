
/////////////////////////////////////////////
// HSV //////////////////////////////////////
/////////////////////////////////////////////

#define QUAD_REAL float
#define QUAD_REAL2 float2
#define QUAD_REAL3 float3
#define QUAD_REAL4 float4
#define QUAD_REAL3x3 float3x3
#define QUAD_REAL4x3 float4x3
#define QUAD_REAL3x4 float3x4
#define QUAD_REAL4x4 float4x4

QUAD_REAL __min_channel(QUAD_REAL3 v)
{
    QUAD_REAL t = (v.x<v.y) ? v.x : v.y;
    t = (t<v.z) ? t : v.z;
    return t;
}

QUAD_REAL __max_channel(QUAD_REAL3 v)
{
    QUAD_REAL t = (v.x>v.y) ? v.x : v.y;
    t = (t>v.z) ? t : v.z;
    return t;
}

QUAD_REAL3 rgb_to_hsv(QUAD_REAL3 RGB)
{
    QUAD_REAL3 HSV = (0.0).xxx;
    QUAD_REAL minVal = __min_channel(RGB);
    QUAD_REAL maxVal = __max_channel(RGB);
    QUAD_REAL delta = maxVal - minVal;             //Delta RGB value 
    HSV.z = maxVal;
    if (delta != 0) {                    // If gray, leave H & S at zero
       HSV.y = delta / maxVal;
       QUAD_REAL3 delRGB;
       delRGB = ( ( ( maxVal.xxx - RGB ) / 6.0 ) + ( delta / 2.0 ) ) / delta;
       if      ( RGB.x == maxVal ) HSV.x = delRGB.z - delRGB.y;
       else if ( RGB.y == maxVal ) HSV.x = ( 1.0/3.0) + delRGB.x - delRGB.z;
       else if ( RGB.z == maxVal ) HSV.x = ( 2.0/3.0) + delRGB.y - delRGB.x;
       if ( HSV.x < 0.0 ) { HSV.x += 1.0; }
       if ( HSV.x > 1.0 ) { HSV.x -= 1.0; }
    }
    return (HSV);
}

QUAD_REAL3 hsv_to_rgb(QUAD_REAL3 HSV)
{
    QUAD_REAL3 RGB = HSV.z;
    if ( HSV.y != 0 ) {
       QUAD_REAL var_h = HSV.x * 6;
       QUAD_REAL var_i = floor(var_h);   // Or ... var_i = floor( var_h )
       QUAD_REAL var_1 = HSV.z * (1.0 - HSV.y);
       QUAD_REAL var_2 = HSV.z * (1.0 - HSV.y * (var_h-var_i));
       QUAD_REAL var_3 = HSV.z * (1.0 - HSV.y * (1-(var_h-var_i)));
       if      (var_i == 0) { RGB = QUAD_REAL3(HSV.z, var_3, var_1); }
       else if (var_i == 1) { RGB = QUAD_REAL3(var_2, HSV.z, var_1); }
       else if (var_i == 2) { RGB = QUAD_REAL3(var_1, HSV.z, var_3); }
       else if (var_i == 3) { RGB = QUAD_REAL3(var_1, var_2, HSV.z); }
       else if (var_i == 4) { RGB = QUAD_REAL3(var_3, var_1, HSV.z); }
       else                 { RGB = QUAD_REAL3(HSV.z, var_1, var_2); }
   }
   return (RGB);
}

QUAD_REAL3 hsv_safe(QUAD_REAL3 InColor)
{
    float3 safeC = InColor;
    safeC.x = frac(safeC.x);
    /* if (safeC.x < 0.0) {
	safeC.x += 1.0;
    } else if (safeC.x > 1.0) {
	safeC.x -= 1.0;
    } */
    return(safeC);
}

QUAD_REAL3 hsv_complement(QUAD_REAL3 InColor)
{
    float3 complement = InColor;
    complement.x -= 0.5;
    if (complement.x<0.0) { complement.x += 1.0; } // faster than hsv_safe()
    return(complement);
}


#if defined( HSVADJUST )
float3 HSVAdjust( float3 input, float3 clrAdjust )
{
	if( (clrAdjust.x != 1)||(clrAdjust.y != 1)||(clrAdjust.z != 1)  )
		return hsv_to_rgb( hsv_safe( rgb_to_hsv(input) * clrAdjust.xyz) );
	else
		return input;		
}
#else
float3 HSVAdjust( float3 input, float3 clrAdjust )
{
	return input * clrAdjust;
}
#endif

void charcolorchangefp(
		float4 diffuseColor		: COLOR,	
		float3 specularColor    : COLOR1,
		float2 texCoord0 : TEXCOORD0,
		 uniform float4 clrModulate,
		uniform sampler2D baseTexture : register(s0),
		out float4 oColour : COLOR
		)
{
		float4 c0 = tex2D(baseTexture, texCoord0);
	  float3 texturedColour = HSVAdjust( c0.rgb, clrModulate.xyz);
    float4 baseColour = diffuseColor ;
    float3 finalColour = baseColour.rgb * texturedColour + specularColor.rgb * (1-c0.a);
    finalColour *= clrModulate.w;
    oColour = float4(finalColour, c0.a * diffuseColor.a );
}
