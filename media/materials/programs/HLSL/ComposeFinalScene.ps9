//---------------------------------------------------------------------------
//	Shader Type: PS
//	Shader Desc: HDR< Pass 14 > --- Final Scene
//---------------------------------------------------------------------------
#include "ShaderDefinePS.hlsl9"

//-----------------------------------------------------------------------------
// **GLOBALS AND CONSTANTS**
//-----------------------------------------------------------------------------
float4 cTargetSize	: register(c19);
float4 cTargetFactor : register(c20);
//float4 cFinalParams : register(c21);

static const float3 cLuminanceCoefficients = float3(0.2126, 0.7152, 0.0722);

//-----------------------------------------------------------------------------
// **Sampler Declaration**
//-----------------------------------------------------------------------------
sampler2D bloomMap	: register(s2);
sampler2D lumMap	: register(s1);	
sampler2D baseMap	: register(s0);	
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Pixel Shader: main
// Desc: Final Scene
//-----------------------------------------------------------------------------
void main(   in     float4 POS 		: POSITION 
			,in     float2 TC 		: TEXCOORD0
			,out    float4 color    : COLOR )
{

		//float cBloomScale = cFinalParams.x;
		//float cExposureScale = cFinalParams.y;
		//float cExposureBias = cFinalParams.z;
		//float cPowerScale = cFinalParams.w;

    float2 tc0 = TC + cTargetSize.zw * 0.5;
    float2 tc1 = TC + cTargetSize.zw * cTargetFactor.xy * 0.5;

    float4 sample = tex2D(baseMap, tc0);

    float3 bloom = tex2D(bloomMap, tc1).rgb;
    
    // sample.rgb *= cPowerScale;

    float lum = dot(sample.rgb, cLuminanceCoefficients);

    // Due lum map is 1x1 texture, we don't care what texture coordinate
    // are used. So use exists value instead load from constant.
    float fAdaptedLum = tex2D(lumMap, float2(0.5,0.5)).g;
    
    float fAdaptedLumDest = 6 / (1e-6 + 1.0h + 6 * fAdaptedLum);
     
     // blue shift
    //   sample = ApplyBlueShift(  sample, fAdaptedLum );
       
    //   half fLumLerp = saturate( fAdaptedLum );
    //   sample.xyz= pow(sample.xyz,1.2 + fLumLerp* ( -0.2) );
  
    // Tone mapping
    // old
    //float fExpose = 1 / max(0.1, cExposureScale * fAdaptedLum + cExposureBias);
    //sample.rgb = 1 - exp2(- fExpose * sample.rgb);

    // new from ce3
    //sample.xyz = 1 - exp2( -1 * (fAdaptedLumDest * sample.xyz +bloom  ));
    float3 sampleFinal = 1 - exp2( -1 * ( fAdaptedLumDest * bloom  ) );
    
    color.xyz = sample.xyz + sampleFinal;
    // color.xyz = sampleFinal;
    color.w = 1;
}
//-----------------------------------------------------------------------------
